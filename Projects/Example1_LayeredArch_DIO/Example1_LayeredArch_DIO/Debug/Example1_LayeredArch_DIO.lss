
Example1_LayeredArch_DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000358  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000358  000003ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000a0  008000a0  0000042c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000045c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b62  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f3  00000000  00000000  00001062  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000297  00000000  00000000  00001755  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  000019ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000617  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d2  00000000  00000000  0000208f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002461  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3a       	cpi	r26, 0xA2	; 162
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8f 01 	call	0x31e	; 0x31e <main>
  8a:	0c 94 aa 01 	jmp	0x354	; 0x354 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Dio_WriteChannel>:
*
*/
void Dio_WriteChannel(Dio_ChannelType channel,STD_levelType level){
	
		Dio_PortType channel_port=channel/8;
		Dio_ChannelType ChannelPos =channel%8;
  92:	98 2f       	mov	r25, r24
  94:	97 70       	andi	r25, 0x07	; 7
		
		switch(channel_port){
  96:	86 95       	lsr	r24
  98:	86 95       	lsr	r24
  9a:	86 95       	lsr	r24
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	21 f1       	breq	.+72     	; 0xe8 <Dio_WriteChannel+0x56>
  a0:	30 f0       	brcs	.+12     	; 0xae <Dio_WriteChannel+0x1c>
  a2:	82 30       	cpi	r24, 0x02	; 2
  a4:	f1 f1       	breq	.+124    	; 0x122 <Dio_WriteChannel+0x90>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	09 f4       	brne	.+2      	; 0xac <Dio_WriteChannel+0x1a>
  aa:	58 c0       	rjmp	.+176    	; 0x15c <Dio_WriteChannel+0xca>
  ac:	08 95       	ret
			case Dio_Port_A:
			if(level == STD_low)
  ae:	61 11       	cpse	r22, r1
  b0:	0e c0       	rjmp	.+28     	; 0xce <Dio_WriteChannel+0x3c>
			{
				CLR_BIT(PORTA_REG,ChannelPos );
  b2:	4b b3       	in	r20, 0x1b	; 27
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	b9 01       	movw	r22, r18
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <Dio_WriteChannel+0x2e>
  bc:	66 0f       	add	r22, r22
  be:	77 1f       	adc	r23, r23
  c0:	9a 95       	dec	r25
  c2:	e2 f7       	brpl	.-8      	; 0xbc <Dio_WriteChannel+0x2a>
  c4:	cb 01       	movw	r24, r22
  c6:	80 95       	com	r24
  c8:	84 23       	and	r24, r20
  ca:	8b bb       	out	0x1b, r24	; 27
  cc:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTA_REG,ChannelPos );
  ce:	4b b3       	in	r20, 0x1b	; 27
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	b9 01       	movw	r22, r18
  d6:	02 c0       	rjmp	.+4      	; 0xdc <Dio_WriteChannel+0x4a>
  d8:	66 0f       	add	r22, r22
  da:	77 1f       	adc	r23, r23
  dc:	9a 95       	dec	r25
  de:	e2 f7       	brpl	.-8      	; 0xd8 <Dio_WriteChannel+0x46>
  e0:	cb 01       	movw	r24, r22
  e2:	84 2b       	or	r24, r20
  e4:	8b bb       	out	0x1b, r24	; 27
  e6:	08 95       	ret
			}
			break;
			case Dio_Port_B:
			if(level == STD_low)
  e8:	61 11       	cpse	r22, r1
  ea:	0e c0       	rjmp	.+28     	; 0x108 <Dio_WriteChannel+0x76>
			{
				CLR_BIT(PORTB_REG,ChannelPos );
  ec:	48 b3       	in	r20, 0x18	; 24
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	b9 01       	movw	r22, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <Dio_WriteChannel+0x68>
  f6:	66 0f       	add	r22, r22
  f8:	77 1f       	adc	r23, r23
  fa:	9a 95       	dec	r25
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <Dio_WriteChannel+0x64>
  fe:	cb 01       	movw	r24, r22
 100:	80 95       	com	r24
 102:	84 23       	and	r24, r20
 104:	88 bb       	out	0x18, r24	; 24
 106:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTB_REG,ChannelPos );
 108:	48 b3       	in	r20, 0x18	; 24
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	b9 01       	movw	r22, r18
 110:	02 c0       	rjmp	.+4      	; 0x116 <Dio_WriteChannel+0x84>
 112:	66 0f       	add	r22, r22
 114:	77 1f       	adc	r23, r23
 116:	9a 95       	dec	r25
 118:	e2 f7       	brpl	.-8      	; 0x112 <Dio_WriteChannel+0x80>
 11a:	cb 01       	movw	r24, r22
 11c:	84 2b       	or	r24, r20
 11e:	88 bb       	out	0x18, r24	; 24
 120:	08 95       	ret
			} 
			break;
			case Dio_Port_C: 
			if(level == STD_low)
 122:	61 11       	cpse	r22, r1
 124:	0e c0       	rjmp	.+28     	; 0x142 <Dio_WriteChannel+0xb0>
			{
				CLR_BIT(PORTC_REG,ChannelPos );
 126:	45 b3       	in	r20, 0x15	; 21
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	b9 01       	movw	r22, r18
 12e:	02 c0       	rjmp	.+4      	; 0x134 <Dio_WriteChannel+0xa2>
 130:	66 0f       	add	r22, r22
 132:	77 1f       	adc	r23, r23
 134:	9a 95       	dec	r25
 136:	e2 f7       	brpl	.-8      	; 0x130 <Dio_WriteChannel+0x9e>
 138:	cb 01       	movw	r24, r22
 13a:	80 95       	com	r24
 13c:	84 23       	and	r24, r20
 13e:	85 bb       	out	0x15, r24	; 21
 140:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTC_REG,ChannelPos );
 142:	45 b3       	in	r20, 0x15	; 21
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	b9 01       	movw	r22, r18
 14a:	02 c0       	rjmp	.+4      	; 0x150 <Dio_WriteChannel+0xbe>
 14c:	66 0f       	add	r22, r22
 14e:	77 1f       	adc	r23, r23
 150:	9a 95       	dec	r25
 152:	e2 f7       	brpl	.-8      	; 0x14c <Dio_WriteChannel+0xba>
 154:	cb 01       	movw	r24, r22
 156:	84 2b       	or	r24, r20
 158:	85 bb       	out	0x15, r24	; 21
 15a:	08 95       	ret
			}
			break;
			case Dio_Port_D: 
			if(level == STD_low)
 15c:	61 11       	cpse	r22, r1
 15e:	0e c0       	rjmp	.+28     	; 0x17c <Dio_WriteChannel+0xea>
			{
				CLR_BIT(PORTD_REG,ChannelPos );
 160:	42 b3       	in	r20, 0x12	; 18
 162:	21 e0       	ldi	r18, 0x01	; 1
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	b9 01       	movw	r22, r18
 168:	02 c0       	rjmp	.+4      	; 0x16e <Dio_WriteChannel+0xdc>
 16a:	66 0f       	add	r22, r22
 16c:	77 1f       	adc	r23, r23
 16e:	9a 95       	dec	r25
 170:	e2 f7       	brpl	.-8      	; 0x16a <Dio_WriteChannel+0xd8>
 172:	cb 01       	movw	r24, r22
 174:	80 95       	com	r24
 176:	84 23       	and	r24, r20
 178:	82 bb       	out	0x12, r24	; 18
 17a:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTD_REG,ChannelPos );
 17c:	42 b3       	in	r20, 0x12	; 18
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	b9 01       	movw	r22, r18
 184:	02 c0       	rjmp	.+4      	; 0x18a <Dio_WriteChannel+0xf8>
 186:	66 0f       	add	r22, r22
 188:	77 1f       	adc	r23, r23
 18a:	9a 95       	dec	r25
 18c:	e2 f7       	brpl	.-8      	; 0x186 <Dio_WriteChannel+0xf4>
 18e:	cb 01       	movw	r24, r22
 190:	84 2b       	or	r24, r20
 192:	82 bb       	out	0x12, r24	; 18
 194:	08 95       	ret

00000196 <DIO_Read>:
/*
*Read channel
*/
void DIO_Read(Dio_ChannelType channel,uint8 *data){
	Dio_PortType channel_port=channel/8;
	Dio_ChannelType channelPos=channel%8;
 196:	98 2f       	mov	r25, r24
 198:	97 70       	andi	r25, 0x07	; 7
	switch(channel_port){
 19a:	86 95       	lsr	r24
 19c:	86 95       	lsr	r24
 19e:	86 95       	lsr	r24
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	a1 f0       	breq	.+40     	; 0x1cc <DIO_Read+0x36>
 1a4:	28 f0       	brcs	.+10     	; 0x1b0 <DIO_Read+0x1a>
 1a6:	82 30       	cpi	r24, 0x02	; 2
 1a8:	f9 f0       	breq	.+62     	; 0x1e8 <DIO_Read+0x52>
 1aa:	83 30       	cpi	r24, 0x03	; 3
 1ac:	59 f1       	breq	.+86     	; 0x204 <DIO_Read+0x6e>
 1ae:	08 95       	ret
		case Dio_Port_A:
				*data=GET_BIT(PINA_REG,channelPos);
 1b0:	89 b3       	in	r24, 0x19	; 25
 1b2:	28 2f       	mov	r18, r24
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	a9 01       	movw	r20, r18
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_Read+0x28>
 1ba:	55 95       	asr	r21
 1bc:	47 95       	ror	r20
 1be:	9a 95       	dec	r25
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_Read+0x24>
 1c2:	ca 01       	movw	r24, r20
 1c4:	81 70       	andi	r24, 0x01	; 1
 1c6:	fb 01       	movw	r30, r22
 1c8:	80 83       	st	Z, r24
		break;
 1ca:	08 95       	ret
		
		case Dio_Port_B:		
				*data=GET_BIT(PINB_REG,channelPos);
 1cc:	86 b3       	in	r24, 0x16	; 22
 1ce:	28 2f       	mov	r18, r24
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	a9 01       	movw	r20, r18
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_Read+0x44>
 1d6:	55 95       	asr	r21
 1d8:	47 95       	ror	r20
 1da:	9a 95       	dec	r25
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_Read+0x40>
 1de:	ca 01       	movw	r24, r20
 1e0:	81 70       	andi	r24, 0x01	; 1
 1e2:	fb 01       	movw	r30, r22
 1e4:	80 83       	st	Z, r24
		break;
 1e6:	08 95       	ret
		case Dio_Port_C:
				*data=GET_BIT(PINC_REG,channelPos);
 1e8:	83 b3       	in	r24, 0x13	; 19
 1ea:	28 2f       	mov	r18, r24
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	a9 01       	movw	r20, r18
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_Read+0x60>
 1f2:	55 95       	asr	r21
 1f4:	47 95       	ror	r20
 1f6:	9a 95       	dec	r25
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_Read+0x5c>
 1fa:	ca 01       	movw	r24, r20
 1fc:	81 70       	andi	r24, 0x01	; 1
 1fe:	fb 01       	movw	r30, r22
 200:	80 83       	st	Z, r24
		break;
 202:	08 95       	ret
		
		case Dio_Port_D:
				*data=GET_BIT(PIND_REG,channelPos);
 204:	80 b3       	in	r24, 0x10	; 16
 206:	28 2f       	mov	r18, r24
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	a9 01       	movw	r20, r18
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_Read+0x7c>
 20e:	55 95       	asr	r21
 210:	47 95       	ror	r20
 212:	9a 95       	dec	r25
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_Read+0x78>
 216:	ca 01       	movw	r24, r20
 218:	81 70       	andi	r24, 0x01	; 1
 21a:	fb 01       	movw	r30, r22
 21c:	80 83       	st	Z, r24
 21e:	08 95       	ret

00000220 <Dio_init>:
/*PD6*/		{Output,STD_low},
/*PD7*/		{Output,STD_low},
};

void Dio_init(void)
{
 220:	e0 e6       	ldi	r30, 0x60	; 96
 222:	f0 e0       	ldi	r31, 0x00	; 0
	uint8 counter;
	uint8 currentPin ;
	uint8 currentPort;
	for(counter =Dio_Channel_A0; counter <PINCOUNT ; counter++)
 224:	80 e0       	ldi	r24, 0x00	; 0
			{
				case Dio_Port_A:
				CLR_BIT(DDRA_REG,currentPin);
				break;
				case Dio_Port_B:
				CLR_BIT(DDRB_REG,currentPin);
 226:	41 e0       	ldi	r20, 0x01	; 1
 228:	50 e0       	ldi	r21, 0x00	; 0
	uint8 counter;
	uint8 currentPin ;
	uint8 currentPort;
	for(counter =Dio_Channel_A0; counter <PINCOUNT ; counter++)
	{
		currentPin = counter % 8;
 22a:	38 2f       	mov	r19, r24
 22c:	37 70       	andi	r19, 0x07	; 7
		currentPort = counter /8;
 22e:	98 2f       	mov	r25, r24
 230:	96 95       	lsr	r25
 232:	96 95       	lsr	r25
 234:	96 95       	lsr	r25
		if(Dio_pin_config[counter].pinDirection ==Output)
 236:	20 81       	ld	r18, Z
 238:	21 30       	cpi	r18, 0x01	; 1
 23a:	a1 f5       	brne	.+104    	; 0x2a4 <Dio_init+0x84>
		{
			switch (currentPort)
 23c:	91 30       	cpi	r25, 0x01	; 1
 23e:	89 f0       	breq	.+34     	; 0x262 <Dio_init+0x42>
 240:	28 f0       	brcs	.+10     	; 0x24c <Dio_init+0x2c>
 242:	92 30       	cpi	r25, 0x02	; 2
 244:	c9 f0       	breq	.+50     	; 0x278 <Dio_init+0x58>
 246:	93 30       	cpi	r25, 0x03	; 3
 248:	11 f1       	breq	.+68     	; 0x28e <Dio_init+0x6e>
 24a:	63 c0       	rjmp	.+198    	; 0x312 <Dio_init+0xf2>
			{
				case Dio_Port_A:
				SET_BIT(DDRA_REG,currentPin);
 24c:	9a b3       	in	r25, 0x1a	; 26
 24e:	ba 01       	movw	r22, r20
 250:	02 c0       	rjmp	.+4      	; 0x256 <Dio_init+0x36>
 252:	66 0f       	add	r22, r22
 254:	77 1f       	adc	r23, r23
 256:	3a 95       	dec	r19
 258:	e2 f7       	brpl	.-8      	; 0x252 <Dio_init+0x32>
 25a:	9b 01       	movw	r18, r22
 25c:	29 2b       	or	r18, r25
 25e:	2a bb       	out	0x1a, r18	; 26
				break;
 260:	58 c0       	rjmp	.+176    	; 0x312 <Dio_init+0xf2>
				case Dio_Port_B:
				SET_BIT(DDRB_REG,currentPin);
 262:	97 b3       	in	r25, 0x17	; 23
 264:	ba 01       	movw	r22, r20
 266:	02 c0       	rjmp	.+4      	; 0x26c <Dio_init+0x4c>
 268:	66 0f       	add	r22, r22
 26a:	77 1f       	adc	r23, r23
 26c:	3a 95       	dec	r19
 26e:	e2 f7       	brpl	.-8      	; 0x268 <Dio_init+0x48>
 270:	9b 01       	movw	r18, r22
 272:	29 2b       	or	r18, r25
 274:	27 bb       	out	0x17, r18	; 23
				break;
 276:	4d c0       	rjmp	.+154    	; 0x312 <Dio_init+0xf2>
				case Dio_Port_C:
				SET_BIT(DDRC_REG,currentPin);
 278:	94 b3       	in	r25, 0x14	; 20
 27a:	ba 01       	movw	r22, r20
 27c:	02 c0       	rjmp	.+4      	; 0x282 <Dio_init+0x62>
 27e:	66 0f       	add	r22, r22
 280:	77 1f       	adc	r23, r23
 282:	3a 95       	dec	r19
 284:	e2 f7       	brpl	.-8      	; 0x27e <Dio_init+0x5e>
 286:	9b 01       	movw	r18, r22
 288:	29 2b       	or	r18, r25
 28a:	24 bb       	out	0x14, r18	; 20
				break;
 28c:	42 c0       	rjmp	.+132    	; 0x312 <Dio_init+0xf2>
				case Dio_Port_D:
				SET_BIT(DDRD_REG,currentPin);
 28e:	91 b3       	in	r25, 0x11	; 17
 290:	ba 01       	movw	r22, r20
 292:	02 c0       	rjmp	.+4      	; 0x298 <Dio_init+0x78>
 294:	66 0f       	add	r22, r22
 296:	77 1f       	adc	r23, r23
 298:	3a 95       	dec	r19
 29a:	e2 f7       	brpl	.-8      	; 0x294 <Dio_init+0x74>
 29c:	9b 01       	movw	r18, r22
 29e:	29 2b       	or	r18, r25
 2a0:	21 bb       	out	0x11, r18	; 17
				break;
 2a2:	37 c0       	rjmp	.+110    	; 0x312 <Dio_init+0xf2>
			}//switch
		}//if
		else
		{
			switch (currentPort)
 2a4:	91 30       	cpi	r25, 0x01	; 1
 2a6:	91 f0       	breq	.+36     	; 0x2cc <Dio_init+0xac>
 2a8:	28 f0       	brcs	.+10     	; 0x2b4 <Dio_init+0x94>
 2aa:	92 30       	cpi	r25, 0x02	; 2
 2ac:	d9 f0       	breq	.+54     	; 0x2e4 <Dio_init+0xc4>
 2ae:	93 30       	cpi	r25, 0x03	; 3
 2b0:	29 f1       	breq	.+74     	; 0x2fc <Dio_init+0xdc>
 2b2:	2f c0       	rjmp	.+94     	; 0x312 <Dio_init+0xf2>
			{
				case Dio_Port_A:
				CLR_BIT(DDRA_REG,currentPin);
 2b4:	2a b3       	in	r18, 0x1a	; 26
 2b6:	ba 01       	movw	r22, r20
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <Dio_init+0x9e>
 2ba:	66 0f       	add	r22, r22
 2bc:	77 1f       	adc	r23, r23
 2be:	3a 95       	dec	r19
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <Dio_init+0x9a>
 2c2:	96 2f       	mov	r25, r22
 2c4:	90 95       	com	r25
 2c6:	92 23       	and	r25, r18
 2c8:	9a bb       	out	0x1a, r25	; 26
				break;
 2ca:	23 c0       	rjmp	.+70     	; 0x312 <Dio_init+0xf2>
				case Dio_Port_B:
				CLR_BIT(DDRB_REG,currentPin);
 2cc:	27 b3       	in	r18, 0x17	; 23
 2ce:	ba 01       	movw	r22, r20
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <Dio_init+0xb6>
 2d2:	66 0f       	add	r22, r22
 2d4:	77 1f       	adc	r23, r23
 2d6:	3a 95       	dec	r19
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <Dio_init+0xb2>
 2da:	96 2f       	mov	r25, r22
 2dc:	90 95       	com	r25
 2de:	92 23       	and	r25, r18
 2e0:	97 bb       	out	0x17, r25	; 23
				break;
 2e2:	17 c0       	rjmp	.+46     	; 0x312 <Dio_init+0xf2>
				case Dio_Port_C:
				CLR_BIT(DDRC_REG,currentPin);
 2e4:	24 b3       	in	r18, 0x14	; 20
 2e6:	ba 01       	movw	r22, r20
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <Dio_init+0xce>
 2ea:	66 0f       	add	r22, r22
 2ec:	77 1f       	adc	r23, r23
 2ee:	3a 95       	dec	r19
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <Dio_init+0xca>
 2f2:	96 2f       	mov	r25, r22
 2f4:	90 95       	com	r25
 2f6:	92 23       	and	r25, r18
 2f8:	94 bb       	out	0x14, r25	; 20
				break;
 2fa:	0b c0       	rjmp	.+22     	; 0x312 <Dio_init+0xf2>
				case Dio_Port_D:
				CLR_BIT(DDRD_REG,currentPin);
 2fc:	21 b3       	in	r18, 0x11	; 17
 2fe:	ba 01       	movw	r22, r20
 300:	02 c0       	rjmp	.+4      	; 0x306 <Dio_init+0xe6>
 302:	66 0f       	add	r22, r22
 304:	77 1f       	adc	r23, r23
 306:	3a 95       	dec	r19
 308:	e2 f7       	brpl	.-8      	; 0x302 <Dio_init+0xe2>
 30a:	96 2f       	mov	r25, r22
 30c:	90 95       	com	r25
 30e:	92 23       	and	r25, r18
 310:	91 bb       	out	0x11, r25	; 17
void Dio_init(void)
{
	uint8 counter;
	uint8 currentPin ;
	uint8 currentPort;
	for(counter =Dio_Channel_A0; counter <PINCOUNT ; counter++)
 312:	8f 5f       	subi	r24, 0xFF	; 255
 314:	32 96       	adiw	r30, 0x02	; 2
 316:	80 32       	cpi	r24, 0x20	; 32
 318:	09 f0       	breq	.+2      	; 0x31c <Dio_init+0xfc>
 31a:	87 cf       	rjmp	.-242    	; 0x22a <Dio_init+0xa>
				break;
			}//switch
			
		}//else
	}//for
 31c:	08 95       	ret

0000031e <main>:
#include <util/delay.h>
#include "dio.h"
#include "dio_cfg.h"
int check=0;
int main(void)	
{		uint8 value;
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	1f 92       	push	r1
 324:	cd b7       	in	r28, 0x3d	; 61
 326:	de b7       	in	r29, 0x3e	; 62
	Dio_init();
 328:	0e 94 10 01 	call	0x220	; 0x220 <Dio_init>
		 Dio_WriteChannel(Dio_Channel_A0,STD_high);
		//_delay_ms(100);
		DIO_Read(Dio_Channel_A0,&value);
		if(value==1){
		//_delay_ms(10);
		check=1;
 32c:	01 e0       	ldi	r16, 0x01	; 1
 32e:	10 e0       	ldi	r17, 0x00	; 0
int main(void)	
{		uint8 value;
	Dio_init();
    while (1) 
    {
		 Dio_WriteChannel(Dio_Channel_A0,STD_high);
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	0e 94 49 00 	call	0x92	; 0x92 <Dio_WriteChannel>
		//_delay_ms(100);
		DIO_Read(Dio_Channel_A0,&value);
 338:	be 01       	movw	r22, r28
 33a:	6f 5f       	subi	r22, 0xFF	; 255
 33c:	7f 4f       	sbci	r23, 0xFF	; 255
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_Read>
		if(value==1){
 344:	89 81       	ldd	r24, Y+1	; 0x01
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	99 f7       	brne	.-26     	; 0x330 <main+0x12>
		//_delay_ms(10);
		check=1;
 34a:	10 93 a1 00 	sts	0x00A1, r17	; 0x8000a1 <__data_end+0x1>
 34e:	00 93 a0 00 	sts	0x00A0, r16	; 0x8000a0 <__data_end>
 352:	ee cf       	rjmp	.-36     	; 0x330 <main+0x12>

00000354 <_exit>:
 354:	f8 94       	cli

00000356 <__stop_program>:
 356:	ff cf       	rjmp	.-2      	; 0x356 <__stop_program>
