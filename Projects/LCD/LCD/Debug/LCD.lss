
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000488  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  00000488  000004fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000584  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001507  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000928  00000000  00000000  00001b87  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007d6  00000000  00000000  000024af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000014c  00000000  00000000  00002c88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000711  00000000  00000000  00002dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000097d  00000000  00000000  000034e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00003e62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3b       	cpi	r26, 0xB8	; 184
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 19 02 	call	0x432	; 0x432 <main>
  7a:	0c 94 42 02 	jmp	0x484	; 0x484 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Dio_WritePort>:
#include "STD_Types.h"
#include "bit_math.h"

void Dio_WritePort(Dio_PortType portx,uint8 uxvalue){

	switch(portx){
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	41 f0       	breq	.+16     	; 0x96 <Dio_WritePort+0x14>
  86:	28 f0       	brcs	.+10     	; 0x92 <Dio_WritePort+0x10>
  88:	82 30       	cpi	r24, 0x02	; 2
  8a:	39 f0       	breq	.+14     	; 0x9a <Dio_WritePort+0x18>
  8c:	83 30       	cpi	r24, 0x03	; 3
  8e:	39 f0       	breq	.+14     	; 0x9e <Dio_WritePort+0x1c>
  90:	08 95       	ret
		case Dio_Port_A:
		PORTA_REG =uxvalue;
  92:	6b bb       	out	0x1b, r22	; 27
		
		break;
  94:	08 95       	ret
		case Dio_Port_B:
		PORTB_REG =uxvalue;
  96:	68 bb       	out	0x18, r22	; 24

		break;
  98:	08 95       	ret
		case Dio_Port_C:
			PORTC_REG =uxvalue;
  9a:	65 bb       	out	0x15, r22	; 21
		break;
  9c:	08 95       	ret
		case Dio_Port_D:
			PORTD_REG =uxvalue;
  9e:	62 bb       	out	0x12, r22	; 18
  a0:	08 95       	ret

000000a2 <Dio_WriteChannel>:
*
*/
void Dio_WriteChannel(Dio_ChannelType channel,STD_levelType level){
	
		Dio_PortType channel_port=channel/8;
		Dio_ChannelType ChannelPos =channel%8;
  a2:	98 2f       	mov	r25, r24
  a4:	97 70       	andi	r25, 0x07	; 7
		
		switch(channel_port){
  a6:	86 95       	lsr	r24
  a8:	86 95       	lsr	r24
  aa:	86 95       	lsr	r24
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	21 f1       	breq	.+72     	; 0xf8 <Dio_WriteChannel+0x56>
  b0:	30 f0       	brcs	.+12     	; 0xbe <Dio_WriteChannel+0x1c>
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	f1 f1       	breq	.+124    	; 0x132 <Dio_WriteChannel+0x90>
  b6:	83 30       	cpi	r24, 0x03	; 3
  b8:	09 f4       	brne	.+2      	; 0xbc <Dio_WriteChannel+0x1a>
  ba:	58 c0       	rjmp	.+176    	; 0x16c <Dio_WriteChannel+0xca>
  bc:	08 95       	ret
			case Dio_Port_A:
			if(level == STD_low)
  be:	61 11       	cpse	r22, r1
  c0:	0e c0       	rjmp	.+28     	; 0xde <Dio_WriteChannel+0x3c>
			{
				CLR_BIT(PORTA_REG,ChannelPos );
  c2:	4b b3       	in	r20, 0x1b	; 27
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	b9 01       	movw	r22, r18
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <Dio_WriteChannel+0x2e>
  cc:	66 0f       	add	r22, r22
  ce:	77 1f       	adc	r23, r23
  d0:	9a 95       	dec	r25
  d2:	e2 f7       	brpl	.-8      	; 0xcc <Dio_WriteChannel+0x2a>
  d4:	cb 01       	movw	r24, r22
  d6:	80 95       	com	r24
  d8:	84 23       	and	r24, r20
  da:	8b bb       	out	0x1b, r24	; 27
  dc:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTA_REG,ChannelPos );
  de:	4b b3       	in	r20, 0x1b	; 27
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	b9 01       	movw	r22, r18
  e6:	02 c0       	rjmp	.+4      	; 0xec <Dio_WriteChannel+0x4a>
  e8:	66 0f       	add	r22, r22
  ea:	77 1f       	adc	r23, r23
  ec:	9a 95       	dec	r25
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <Dio_WriteChannel+0x46>
  f0:	cb 01       	movw	r24, r22
  f2:	84 2b       	or	r24, r20
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	08 95       	ret
			}
			break;
			case Dio_Port_B:
			if(level == STD_low)
  f8:	61 11       	cpse	r22, r1
  fa:	0e c0       	rjmp	.+28     	; 0x118 <Dio_WriteChannel+0x76>
			{
				CLR_BIT(PORTB_REG,ChannelPos );
  fc:	48 b3       	in	r20, 0x18	; 24
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	b9 01       	movw	r22, r18
 104:	02 c0       	rjmp	.+4      	; 0x10a <Dio_WriteChannel+0x68>
 106:	66 0f       	add	r22, r22
 108:	77 1f       	adc	r23, r23
 10a:	9a 95       	dec	r25
 10c:	e2 f7       	brpl	.-8      	; 0x106 <Dio_WriteChannel+0x64>
 10e:	cb 01       	movw	r24, r22
 110:	80 95       	com	r24
 112:	84 23       	and	r24, r20
 114:	88 bb       	out	0x18, r24	; 24
 116:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTB_REG,ChannelPos );
 118:	48 b3       	in	r20, 0x18	; 24
 11a:	21 e0       	ldi	r18, 0x01	; 1
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	b9 01       	movw	r22, r18
 120:	02 c0       	rjmp	.+4      	; 0x126 <Dio_WriteChannel+0x84>
 122:	66 0f       	add	r22, r22
 124:	77 1f       	adc	r23, r23
 126:	9a 95       	dec	r25
 128:	e2 f7       	brpl	.-8      	; 0x122 <Dio_WriteChannel+0x80>
 12a:	cb 01       	movw	r24, r22
 12c:	84 2b       	or	r24, r20
 12e:	88 bb       	out	0x18, r24	; 24
 130:	08 95       	ret
			} 
			break;
			case Dio_Port_C: 
			if(level == STD_low)
 132:	61 11       	cpse	r22, r1
 134:	0e c0       	rjmp	.+28     	; 0x152 <Dio_WriteChannel+0xb0>
			{
				CLR_BIT(PORTC_REG,ChannelPos );
 136:	45 b3       	in	r20, 0x15	; 21
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	b9 01       	movw	r22, r18
 13e:	02 c0       	rjmp	.+4      	; 0x144 <Dio_WriteChannel+0xa2>
 140:	66 0f       	add	r22, r22
 142:	77 1f       	adc	r23, r23
 144:	9a 95       	dec	r25
 146:	e2 f7       	brpl	.-8      	; 0x140 <Dio_WriteChannel+0x9e>
 148:	cb 01       	movw	r24, r22
 14a:	80 95       	com	r24
 14c:	84 23       	and	r24, r20
 14e:	85 bb       	out	0x15, r24	; 21
 150:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTC_REG,ChannelPos );
 152:	45 b3       	in	r20, 0x15	; 21
 154:	21 e0       	ldi	r18, 0x01	; 1
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	b9 01       	movw	r22, r18
 15a:	02 c0       	rjmp	.+4      	; 0x160 <Dio_WriteChannel+0xbe>
 15c:	66 0f       	add	r22, r22
 15e:	77 1f       	adc	r23, r23
 160:	9a 95       	dec	r25
 162:	e2 f7       	brpl	.-8      	; 0x15c <Dio_WriteChannel+0xba>
 164:	cb 01       	movw	r24, r22
 166:	84 2b       	or	r24, r20
 168:	85 bb       	out	0x15, r24	; 21
 16a:	08 95       	ret
			}
			break;
			case Dio_Port_D: 
			if(level == STD_low)
 16c:	61 11       	cpse	r22, r1
 16e:	0e c0       	rjmp	.+28     	; 0x18c <Dio_WriteChannel+0xea>
			{
				CLR_BIT(PORTD_REG,ChannelPos );
 170:	42 b3       	in	r20, 0x12	; 18
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	b9 01       	movw	r22, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <Dio_WriteChannel+0xdc>
 17a:	66 0f       	add	r22, r22
 17c:	77 1f       	adc	r23, r23
 17e:	9a 95       	dec	r25
 180:	e2 f7       	brpl	.-8      	; 0x17a <Dio_WriteChannel+0xd8>
 182:	cb 01       	movw	r24, r22
 184:	80 95       	com	r24
 186:	84 23       	and	r24, r20
 188:	82 bb       	out	0x12, r24	; 18
 18a:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTD_REG,ChannelPos );
 18c:	42 b3       	in	r20, 0x12	; 18
 18e:	21 e0       	ldi	r18, 0x01	; 1
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	b9 01       	movw	r22, r18
 194:	02 c0       	rjmp	.+4      	; 0x19a <Dio_WriteChannel+0xf8>
 196:	66 0f       	add	r22, r22
 198:	77 1f       	adc	r23, r23
 19a:	9a 95       	dec	r25
 19c:	e2 f7       	brpl	.-8      	; 0x196 <Dio_WriteChannel+0xf4>
 19e:	cb 01       	movw	r24, r22
 1a0:	84 2b       	or	r24, r20
 1a2:	82 bb       	out	0x12, r24	; 18
 1a4:	08 95       	ret

000001a6 <Dio_init>:
/*PD6*/		{Output,STD_low},
/*PD7*/		{Output,STD_low},
};

void Dio_init(void)
{
 1a6:	e8 e6       	ldi	r30, 0x68	; 104
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
	uint8 counter;
	uint8 currentPin ;
	uint8 currentPort;
	for(counter =Dio_Channel_A0; counter <PINCOUNT ; counter++)
 1aa:	80 e0       	ldi	r24, 0x00	; 0
			{
				case Dio_Port_A:
				CLR_BIT(DDRA_REG,currentPin);
				break;
				case Dio_Port_B:
				CLR_BIT(DDRB_REG,currentPin);
 1ac:	41 e0       	ldi	r20, 0x01	; 1
 1ae:	50 e0       	ldi	r21, 0x00	; 0
	uint8 counter;
	uint8 currentPin ;
	uint8 currentPort;
	for(counter =Dio_Channel_A0; counter <PINCOUNT ; counter++)
	{
		currentPin = counter % 8;
 1b0:	38 2f       	mov	r19, r24
 1b2:	37 70       	andi	r19, 0x07	; 7
		currentPort = counter /8;
 1b4:	98 2f       	mov	r25, r24
 1b6:	96 95       	lsr	r25
 1b8:	96 95       	lsr	r25
 1ba:	96 95       	lsr	r25
		if(Dio_pin_config[counter].pinDirection ==Output)
 1bc:	20 81       	ld	r18, Z
 1be:	21 30       	cpi	r18, 0x01	; 1
 1c0:	a1 f5       	brne	.+104    	; 0x22a <Dio_init+0x84>
		{
			switch (currentPort)
 1c2:	91 30       	cpi	r25, 0x01	; 1
 1c4:	89 f0       	breq	.+34     	; 0x1e8 <Dio_init+0x42>
 1c6:	28 f0       	brcs	.+10     	; 0x1d2 <Dio_init+0x2c>
 1c8:	92 30       	cpi	r25, 0x02	; 2
 1ca:	c9 f0       	breq	.+50     	; 0x1fe <Dio_init+0x58>
 1cc:	93 30       	cpi	r25, 0x03	; 3
 1ce:	11 f1       	breq	.+68     	; 0x214 <Dio_init+0x6e>
 1d0:	63 c0       	rjmp	.+198    	; 0x298 <Dio_init+0xf2>
			{
				case Dio_Port_A:
				SET_BIT(DDRA_REG,currentPin);
 1d2:	9a b3       	in	r25, 0x1a	; 26
 1d4:	ba 01       	movw	r22, r20
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <Dio_init+0x36>
 1d8:	66 0f       	add	r22, r22
 1da:	77 1f       	adc	r23, r23
 1dc:	3a 95       	dec	r19
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <Dio_init+0x32>
 1e0:	9b 01       	movw	r18, r22
 1e2:	29 2b       	or	r18, r25
 1e4:	2a bb       	out	0x1a, r18	; 26
				break;
 1e6:	58 c0       	rjmp	.+176    	; 0x298 <Dio_init+0xf2>
				case Dio_Port_B:
				SET_BIT(DDRB_REG,currentPin);
 1e8:	97 b3       	in	r25, 0x17	; 23
 1ea:	ba 01       	movw	r22, r20
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <Dio_init+0x4c>
 1ee:	66 0f       	add	r22, r22
 1f0:	77 1f       	adc	r23, r23
 1f2:	3a 95       	dec	r19
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <Dio_init+0x48>
 1f6:	9b 01       	movw	r18, r22
 1f8:	29 2b       	or	r18, r25
 1fa:	27 bb       	out	0x17, r18	; 23
				break;
 1fc:	4d c0       	rjmp	.+154    	; 0x298 <Dio_init+0xf2>
				case Dio_Port_C:
				SET_BIT(DDRC_REG,currentPin);
 1fe:	94 b3       	in	r25, 0x14	; 20
 200:	ba 01       	movw	r22, r20
 202:	02 c0       	rjmp	.+4      	; 0x208 <Dio_init+0x62>
 204:	66 0f       	add	r22, r22
 206:	77 1f       	adc	r23, r23
 208:	3a 95       	dec	r19
 20a:	e2 f7       	brpl	.-8      	; 0x204 <Dio_init+0x5e>
 20c:	9b 01       	movw	r18, r22
 20e:	29 2b       	or	r18, r25
 210:	24 bb       	out	0x14, r18	; 20
				break;
 212:	42 c0       	rjmp	.+132    	; 0x298 <Dio_init+0xf2>
				case Dio_Port_D:
				SET_BIT(DDRD_REG,currentPin);
 214:	91 b3       	in	r25, 0x11	; 17
 216:	ba 01       	movw	r22, r20
 218:	02 c0       	rjmp	.+4      	; 0x21e <Dio_init+0x78>
 21a:	66 0f       	add	r22, r22
 21c:	77 1f       	adc	r23, r23
 21e:	3a 95       	dec	r19
 220:	e2 f7       	brpl	.-8      	; 0x21a <Dio_init+0x74>
 222:	9b 01       	movw	r18, r22
 224:	29 2b       	or	r18, r25
 226:	21 bb       	out	0x11, r18	; 17
				break;
 228:	37 c0       	rjmp	.+110    	; 0x298 <Dio_init+0xf2>
			}//switch
		}//if
		else
		{
			switch (currentPort)
 22a:	91 30       	cpi	r25, 0x01	; 1
 22c:	91 f0       	breq	.+36     	; 0x252 <Dio_init+0xac>
 22e:	28 f0       	brcs	.+10     	; 0x23a <Dio_init+0x94>
 230:	92 30       	cpi	r25, 0x02	; 2
 232:	d9 f0       	breq	.+54     	; 0x26a <Dio_init+0xc4>
 234:	93 30       	cpi	r25, 0x03	; 3
 236:	29 f1       	breq	.+74     	; 0x282 <Dio_init+0xdc>
 238:	2f c0       	rjmp	.+94     	; 0x298 <Dio_init+0xf2>
			{
				case Dio_Port_A:
				CLR_BIT(DDRA_REG,currentPin);
 23a:	2a b3       	in	r18, 0x1a	; 26
 23c:	ba 01       	movw	r22, r20
 23e:	02 c0       	rjmp	.+4      	; 0x244 <Dio_init+0x9e>
 240:	66 0f       	add	r22, r22
 242:	77 1f       	adc	r23, r23
 244:	3a 95       	dec	r19
 246:	e2 f7       	brpl	.-8      	; 0x240 <Dio_init+0x9a>
 248:	96 2f       	mov	r25, r22
 24a:	90 95       	com	r25
 24c:	92 23       	and	r25, r18
 24e:	9a bb       	out	0x1a, r25	; 26
				break;
 250:	23 c0       	rjmp	.+70     	; 0x298 <Dio_init+0xf2>
				case Dio_Port_B:
				CLR_BIT(DDRB_REG,currentPin);
 252:	27 b3       	in	r18, 0x17	; 23
 254:	ba 01       	movw	r22, r20
 256:	02 c0       	rjmp	.+4      	; 0x25c <Dio_init+0xb6>
 258:	66 0f       	add	r22, r22
 25a:	77 1f       	adc	r23, r23
 25c:	3a 95       	dec	r19
 25e:	e2 f7       	brpl	.-8      	; 0x258 <Dio_init+0xb2>
 260:	96 2f       	mov	r25, r22
 262:	90 95       	com	r25
 264:	92 23       	and	r25, r18
 266:	97 bb       	out	0x17, r25	; 23
				break;
 268:	17 c0       	rjmp	.+46     	; 0x298 <Dio_init+0xf2>
				case Dio_Port_C:
				CLR_BIT(DDRC_REG,currentPin);
 26a:	24 b3       	in	r18, 0x14	; 20
 26c:	ba 01       	movw	r22, r20
 26e:	02 c0       	rjmp	.+4      	; 0x274 <Dio_init+0xce>
 270:	66 0f       	add	r22, r22
 272:	77 1f       	adc	r23, r23
 274:	3a 95       	dec	r19
 276:	e2 f7       	brpl	.-8      	; 0x270 <Dio_init+0xca>
 278:	96 2f       	mov	r25, r22
 27a:	90 95       	com	r25
 27c:	92 23       	and	r25, r18
 27e:	94 bb       	out	0x14, r25	; 20
				break;
 280:	0b c0       	rjmp	.+22     	; 0x298 <Dio_init+0xf2>
				case Dio_Port_D:
				CLR_BIT(DDRD_REG,currentPin);
 282:	21 b3       	in	r18, 0x11	; 17
 284:	ba 01       	movw	r22, r20
 286:	02 c0       	rjmp	.+4      	; 0x28c <Dio_init+0xe6>
 288:	66 0f       	add	r22, r22
 28a:	77 1f       	adc	r23, r23
 28c:	3a 95       	dec	r19
 28e:	e2 f7       	brpl	.-8      	; 0x288 <Dio_init+0xe2>
 290:	96 2f       	mov	r25, r22
 292:	90 95       	com	r25
 294:	92 23       	and	r25, r18
 296:	91 bb       	out	0x11, r25	; 17
void Dio_init(void)
{
	uint8 counter;
	uint8 currentPin ;
	uint8 currentPort;
	for(counter =Dio_Channel_A0; counter <PINCOUNT ; counter++)
 298:	8f 5f       	subi	r24, 0xFF	; 255
 29a:	32 96       	adiw	r30, 0x02	; 2
 29c:	80 32       	cpi	r24, 0x20	; 32
 29e:	09 f0       	breq	.+2      	; 0x2a2 <Dio_init+0xfc>
 2a0:	87 cf       	rjmp	.-242    	; 0x1b0 <Dio_init+0xa>
				break;
			}//switch
			
		}//else
	}//for
 2a2:	08 95       	ret

000002a4 <LCD_Command>:
*/
void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
 2a4:	cf 93       	push	r28
 2a6:	c8 2f       	mov	r28, r24
 2a8:	6b b3       	in	r22, 0x1b	; 27
 2aa:	6f 70       	andi	r22, 0x0F	; 15
 2ac:	80 7f       	andi	r24, 0xF0	; 240
 2ae:	68 2b       	or	r22, r24
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WritePort>
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	89 e0       	ldi	r24, 0x09	; 9
 2ba:	0e 94 51 00 	call	0xa2	; 0xa2 <Dio_WriteChannel>
 2be:	61 e0       	ldi	r22, 0x01	; 1
 2c0:	8b e0       	ldi	r24, 0x0B	; 11
 2c2:	0e 94 51 00 	call	0xa2	; 0xa2 <Dio_WriteChannel>
 2c6:	25 e3       	ldi	r18, 0x35	; 53
 2c8:	2a 95       	dec	r18
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <LCD_Command+0x24>
 2cc:	00 00       	nop
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	8b e0       	ldi	r24, 0x0B	; 11
 2d2:	0e 94 51 00 	call	0xa2	; 0xa2 <Dio_WriteChannel>
 2d6:	8f e3       	ldi	r24, 0x3F	; 63
 2d8:	9f e1       	ldi	r25, 0x1F	; 31
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	f1 f7       	brne	.-4      	; 0x2da <LCD_Command+0x36>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCD_Command+0x3c>
 2e0:	00 00       	nop
 2e2:	6b b3       	in	r22, 0x1b	; 27
 2e4:	6f 70       	andi	r22, 0x0F	; 15
 2e6:	20 e1       	ldi	r18, 0x10	; 16
 2e8:	c2 9f       	mul	r28, r18
 2ea:	c0 01       	movw	r24, r0
 2ec:	11 24       	eor	r1, r1
 2ee:	68 2b       	or	r22, r24
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WritePort>
 2f6:	61 e0       	ldi	r22, 0x01	; 1
 2f8:	8b e0       	ldi	r24, 0x0B	; 11
 2fa:	0e 94 51 00 	call	0xa2	; 0xa2 <Dio_WriteChannel>
 2fe:	85 e0       	ldi	r24, 0x05	; 5
 300:	8a 95       	dec	r24
 302:	f1 f7       	brne	.-4      	; 0x300 <LCD_Command+0x5c>
 304:	00 00       	nop
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	8b e0       	ldi	r24, 0x0B	; 11
 30a:	0e 94 51 00 	call	0xa2	; 0xa2 <Dio_WriteChannel>
 30e:	8f e3       	ldi	r24, 0x3F	; 63
 310:	9f e1       	ldi	r25, 0x1F	; 31
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <LCD_Command+0x6e>
 316:	00 c0       	rjmp	.+0      	; 0x318 <LCD_Command+0x74>
 318:	00 00       	nop
 31a:	cf 91       	pop	r28
 31c:	08 95       	ret

0000031e <LCD_Init>:
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	8a e0       	ldi	r24, 0x0A	; 10
 322:	0e 94 51 00 	call	0xa2	; 0xa2 <Dio_WriteChannel>
 326:	2f ef       	ldi	r18, 0xFF	; 255
 328:	89 ef       	ldi	r24, 0xF9	; 249
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	21 50       	subi	r18, 0x01	; 1
 32e:	80 40       	sbci	r24, 0x00	; 0
 330:	90 40       	sbci	r25, 0x00	; 0
 332:	e1 f7       	brne	.-8      	; 0x32c <LCD_Init+0xe>
 334:	00 c0       	rjmp	.+0      	; 0x336 <LCD_Init+0x18>
 336:	00 00       	nop
 338:	83 e3       	ldi	r24, 0x33	; 51
 33a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_Command>
 33e:	82 e3       	ldi	r24, 0x32	; 50
 340:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_Command>
 344:	88 e2       	ldi	r24, 0x28	; 40
 346:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_Command>
 34a:	8c e0       	ldi	r24, 0x0C	; 12
 34c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_Command>
 350:	86 e0       	ldi	r24, 0x06	; 6
 352:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_Command>
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_Command>
 35c:	08 95       	ret

0000035e <LCD_Char>:
 35e:	cf 93       	push	r28
 360:	c8 2f       	mov	r28, r24
 362:	6b b3       	in	r22, 0x1b	; 27
 364:	6f 70       	andi	r22, 0x0F	; 15
 366:	80 7f       	andi	r24, 0xF0	; 240
 368:	68 2b       	or	r22, r24
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WritePort>
 370:	61 e0       	ldi	r22, 0x01	; 1
 372:	89 e0       	ldi	r24, 0x09	; 9
 374:	0e 94 51 00 	call	0xa2	; 0xa2 <Dio_WriteChannel>
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	8b e0       	ldi	r24, 0x0B	; 11
 37c:	0e 94 51 00 	call	0xa2	; 0xa2 <Dio_WriteChannel>
 380:	25 e0       	ldi	r18, 0x05	; 5
 382:	2a 95       	dec	r18
 384:	f1 f7       	brne	.-4      	; 0x382 <LCD_Char+0x24>
 386:	00 00       	nop
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	8b e0       	ldi	r24, 0x0B	; 11
 38c:	0e 94 51 00 	call	0xa2	; 0xa2 <Dio_WriteChannel>
 390:	8f e3       	ldi	r24, 0x3F	; 63
 392:	9f e1       	ldi	r25, 0x1F	; 31
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <LCD_Char+0x36>
 398:	00 c0       	rjmp	.+0      	; 0x39a <LCD_Char+0x3c>
 39a:	00 00       	nop
 39c:	6b b3       	in	r22, 0x1b	; 27
 39e:	6f 70       	andi	r22, 0x0F	; 15
 3a0:	20 e1       	ldi	r18, 0x10	; 16
 3a2:	c2 9f       	mul	r28, r18
 3a4:	c0 01       	movw	r24, r0
 3a6:	11 24       	eor	r1, r1
 3a8:	68 2b       	or	r22, r24
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	0e 94 41 00 	call	0x82	; 0x82 <Dio_WritePort>
 3b0:	61 e0       	ldi	r22, 0x01	; 1
 3b2:	8b e0       	ldi	r24, 0x0B	; 11
 3b4:	0e 94 51 00 	call	0xa2	; 0xa2 <Dio_WriteChannel>
 3b8:	85 e0       	ldi	r24, 0x05	; 5
 3ba:	8a 95       	dec	r24
 3bc:	f1 f7       	brne	.-4      	; 0x3ba <LCD_Char+0x5c>
 3be:	00 00       	nop
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	8b e0       	ldi	r24, 0x0B	; 11
 3c4:	0e 94 51 00 	call	0xa2	; 0xa2 <Dio_WriteChannel>
 3c8:	9f ef       	ldi	r25, 0xFF	; 255
 3ca:	29 ef       	ldi	r18, 0xF9	; 249
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	91 50       	subi	r25, 0x01	; 1
 3d0:	20 40       	sbci	r18, 0x00	; 0
 3d2:	80 40       	sbci	r24, 0x00	; 0
 3d4:	e1 f7       	brne	.-8      	; 0x3ce <LCD_Char+0x70>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <LCD_Char+0x7a>
 3d8:	00 00       	nop
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <LCD_String>:
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	ec 01       	movw	r28, r24
 3e4:	88 81       	ld	r24, Y
 3e6:	88 23       	and	r24, r24
 3e8:	31 f0       	breq	.+12     	; 0x3f6 <LCD_String+0x18>
 3ea:	21 96       	adiw	r28, 0x01	; 1
 3ec:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Char>
 3f0:	89 91       	ld	r24, Y+
 3f2:	81 11       	cpse	r24, r1
 3f4:	fb cf       	rjmp	.-10     	; 0x3ec <LCD_String+0xe>
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret

000003fc <LCD_Custom_Char>:
}


void LCD_Custom_Char(unsigned char loc, unsigned char *msg)
{
 3fc:	0f 93       	push	r16
 3fe:	1f 93       	push	r17
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
	unsigned char i;
	if(loc<8)
 404:	88 30       	cpi	r24, 0x08	; 8
 406:	80 f4       	brcc	.+32     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 408:	8b 01       	movw	r16, r22
	{
		LCD_Command (0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
 40a:	88 0f       	add	r24, r24
 40c:	88 0f       	add	r24, r24
 40e:	88 0f       	add	r24, r24
 410:	80 5c       	subi	r24, 0xC0	; 192
 412:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_Command>
 416:	e8 01       	movw	r28, r16
 418:	08 5f       	subi	r16, 0xF8	; 248
 41a:	1f 4f       	sbci	r17, 0xFF	; 255
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
		LCD_Char(msg[i]);
 41c:	89 91       	ld	r24, Y+
 41e:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Char>
{
	unsigned char i;
	if(loc<8)
	{
		LCD_Command (0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
 422:	c0 17       	cp	r28, r16
 424:	d1 07       	cpc	r29, r17
 426:	d1 f7       	brne	.-12     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		LCD_Char(msg[i]);
	}
}
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	1f 91       	pop	r17
 42e:	0f 91       	pop	r16
 430:	08 95       	ret

00000432 <main>:

	
int main(void)
{
	int i=0;
	Dio_init();
 432:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <Dio_init>
	LCD_Init();
 436:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_Init>
	LCD_Command(0x80);
 43a:	80 e8       	ldi	r24, 0x80	; 128
 43c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_Command>
	LCD_String("Welcome to AMIT");
 440:	88 ea       	ldi	r24, 0xA8	; 168
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 ef 01 	call	0x3de	; 0x3de <LCD_String>
	LCD_Char(' ');		/* space between each custom char. */
 448:	80 e2       	ldi	r24, 0x20	; 32
 44a:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Char>
	LCD_Custom_Char(0,smileyFace); 
 44e:	60 e6       	ldi	r22, 0x60	; 96
 450:	70 e0       	ldi	r23, 0x00	; 0
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_Custom_Char>
	LCD_Command(0x8F);
 458:	8f e8       	ldi	r24, 0x8F	; 143
 45a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_Command>
	LCD_Char(0);	/* char at '0'th position will display on lcd */
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	0e 94 af 01 	call	0x35e	; 0x35e <LCD_Char>
	
	Dio_WriteChannel(Dio_Channel_C2,STD_high);
 464:	61 e0       	ldi	r22, 0x01	; 1
 466:	70 e0       	ldi	r23, 0x00	; 0
 468:	82 e1       	ldi	r24, 0x12	; 18
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 51 00 	call	0xa2	; 0xa2 <Dio_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 470:	2f ef       	ldi	r18, 0xFF	; 255
 472:	83 ed       	ldi	r24, 0xD3	; 211
 474:	90 e3       	ldi	r25, 0x30	; 48
 476:	21 50       	subi	r18, 0x01	; 1
 478:	80 40       	sbci	r24, 0x00	; 0
 47a:	90 40       	sbci	r25, 0x00	; 0
 47c:	e1 f7       	brne	.-8      	; 0x476 <main+0x44>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <main+0x4e>
 480:	00 00       	nop
 482:	ff cf       	rjmp	.-2      	; 0x482 <main+0x50>

00000484 <_exit>:
 484:	f8 94       	cli

00000486 <__stop_program>:
 486:	ff cf       	rjmp	.-2      	; 0x486 <__stop_program>
