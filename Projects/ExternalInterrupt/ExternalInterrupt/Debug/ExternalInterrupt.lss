
ExternalInterrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000156  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000156  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006a  0080006a  000001f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a4  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005fa  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d3  00000000  00000000  00000f36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000074  00000000  00000000  0000120c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000355  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000df  00000000  00000000  000015d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000016b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 84 00 	call	0x108	; 0x108 <main>
  8a:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ExInterrupt_Init>:
#define SevenSeg_direction	DDRA		/* define LED Direction */
#define SevenSeg_PORT		PORTA

void ExInterrupt_Init(){
	
	GICR=(1<<INT0);   //Enable External Interrupts INT1
  92:	80 e4       	ldi	r24, 0x40	; 64
  94:	8b bf       	out	0x3b, r24	; 59
	MCUCR  &=~(1<<ISC00);       //falling edge
  96:	85 b7       	in	r24, 0x35	; 53
  98:	8e 7f       	andi	r24, 0xFE	; 254
  9a:	85 bf       	out	0x35, r24	; 53
	MCUCR  |=(1<<ISC01);       //falling edge
  9c:	85 b7       	in	r24, 0x35	; 53
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	85 bf       	out	0x35, r24	; 53

	sei();     // Enable global interrupts by setting global interrupt enable bit in SREG
  a2:	78 94       	sei
  a4:	08 95       	ret

000000a6 <sevenSegment>:
}
/*

*/
void sevenSegment(){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	2a 97       	sbiw	r28, 0x0a	; 10
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61

	char array[]={0,1,2,3,4,5,6,7,8,9};
  ba:	8a e0       	ldi	r24, 0x0A	; 10
  bc:	e0 e6       	ldi	r30, 0x60	; 96
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	de 01       	movw	r26, r28
  c2:	11 96       	adiw	r26, 0x01	; 1
  c4:	01 90       	ld	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	8a 95       	dec	r24
  ca:	e1 f7       	brne	.-8      	; 0xc4 <sevenSegment+0x1e>
  cc:	fe 01       	movw	r30, r28
  ce:	31 96       	adiw	r30, 0x01	; 1
  d0:	9e 01       	movw	r18, r28
  d2:	25 5f       	subi	r18, 0xF5	; 245
  d4:	3f 4f       	sbci	r19, 0xFF	; 255
	/* write BCD value for CA display from 0 to 9 */

	for(int i=0;i<10;i++)
	{
		
		SevenSeg_PORT = ( array[i] <<4);/* write data on to the LED port */
  d6:	81 91       	ld	r24, Z+
  d8:	82 95       	swap	r24
  da:	80 7f       	andi	r24, 0xF0	; 240
  dc:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	4f ef       	ldi	r20, 0xFF	; 255
  e0:	89 e6       	ldi	r24, 0x69	; 105
  e2:	98 e1       	ldi	r25, 0x18	; 24
  e4:	41 50       	subi	r20, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <sevenSegment+0x3e>
  ec:	00 c0       	rjmp	.+0      	; 0xee <sevenSegment+0x48>
  ee:	00 00       	nop
void sevenSegment(){

	char array[]={0,1,2,3,4,5,6,7,8,9};
	/* write BCD value for CA display from 0 to 9 */

	for(int i=0;i<10;i++)
  f0:	e2 17       	cp	r30, r18
  f2:	f3 07       	cpc	r31, r19
  f4:	81 f7       	brne	.-32     	; 0xd6 <sevenSegment+0x30>
	{
		
		SevenSeg_PORT = ( array[i] <<4);/* write data on to the LED port */
		_delay_ms(500); /* wait for 500 melli second */
	}
}
  f6:	2a 96       	adiw	r28, 0x0a	; 10
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	f8 94       	cli
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	0f be       	out	0x3f, r0	; 63
 100:	cd bf       	out	0x3d, r28	; 61
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <main>:
int main(void)
{
	 ExInterrupt_Init();
 108:	0e 94 49 00 	call	0x92	; 0x92 <ExInterrupt_Init>
	//Seven segment pins to be output
	SevenSeg_direction |=(1<<4) |(1<<5) | (1<<6) | (1<<7);//PA4 to PA7
 10c:	8a b3       	in	r24, 0x1a	; 26
 10e:	80 6f       	ori	r24, 0xF0	; 240
 110:	8a bb       	out	0x1a, r24	; 26
	SevenSeg_EN_DIR |= SevenSEG_EN1 | SevenSEG_EN2; //PB1 , PB2 are output for EN sv
 112:	87 b3       	in	r24, 0x17	; 23
 114:	86 60       	ori	r24, 0x06	; 6
 116:	87 bb       	out	0x17, r24	; 23
    while (1) 
    {
		
		SevenSeg_EN_PORT |= SevenSEG_EN1 | SevenSEG_EN2; //Enable Seven Seg
 118:	88 b3       	in	r24, 0x18	; 24
 11a:	86 60       	ori	r24, 0x06	; 6
 11c:	88 bb       	out	0x18, r24	; 24
		sevenSegment();
 11e:	0e 94 53 00 	call	0xa6	; 0xa6 <sevenSegment>
 122:	fa cf       	rjmp	.-12     	; 0x118 <main+0x10>

00000124 <__vector_1>:
		//background
    }
}


	ISR (INT0_vect){
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
	//Do something
	//TOGGLE_LED();
	counter++;
 130:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 134:	8f 5f       	subi	r24, 0xFF	; 255
 136:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
	if(counter==9)counter=0;
 13a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 13e:	89 30       	cpi	r24, 0x09	; 9
 140:	11 f4       	brne	.+4      	; 0x146 <__vector_1+0x22>
 142:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
	}
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
